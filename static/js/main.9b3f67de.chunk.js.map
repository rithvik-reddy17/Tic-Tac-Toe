{"version":3,"sources":["Components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b3f67de.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\n\nconst Icon = ({ name }) => {\n    switch (name) {\n        case \"circle\":\n            return <FaRegCircle className=\"icons\" />;\n        case \"cross\":\n            return <FaTimes className=\"icons\" />;\n\n        default:\n            return <FaPen className=\"icons\" />;\n    }\n};\n\nexport default Icon;\n","import React, { useState } from \"react\";\nimport Icon from \"./Components/Icon\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n    const [isCross, setIsCross] = useState(false);\n\n    const [winMessage, setWinMessage] = useState(\"\");\n\n    const reloadGame = () => {\n        setIsCross(false);\n        setWinMessage(\"\");\n        itemArray.fill(\"empty\", 0, 9);\n    };\n\n    const checkIsWinner = () => {\n        if (\n            itemArray[0] === itemArray[1] &&\n            itemArray[0] === itemArray[2] &&\n            itemArray[0] !== \"empty\"\n        ) {\n            setWinMessage(`${itemArray[0]} won`);\n        } else if (\n            itemArray[3] !== \"empty\" &&\n            itemArray[3] === itemArray[4] &&\n            itemArray[4] === itemArray[5]\n        ) {\n            setWinMessage(`${itemArray[3]} won`);\n        } else if (\n            itemArray[6] !== \"empty\" &&\n            itemArray[6] === itemArray[7] &&\n            itemArray[7] === itemArray[8]\n        ) {\n            setWinMessage(`${itemArray[6]} won`);\n        } else if (\n            itemArray[0] !== \"empty\" &&\n            itemArray[0] === itemArray[3] &&\n            itemArray[3] === itemArray[6]\n        ) {\n            setWinMessage(`${itemArray[0]} won`);\n        } else if (\n            itemArray[1] !== \"empty\" &&\n            itemArray[1] === itemArray[4] &&\n            itemArray[4] === itemArray[7]\n        ) {\n            setWinMessage(`${itemArray[1]} won`);\n        } else if (\n            itemArray[2] !== \"empty\" &&\n            itemArray[2] === itemArray[5] &&\n            itemArray[5] === itemArray[8]\n        ) {\n            setWinMessage(`${itemArray[2]} won`);\n        } else if (\n            itemArray[0] !== \"empty\" &&\n            itemArray[0] === itemArray[4] &&\n            itemArray[4] === itemArray[8]\n        ) {\n            setWinMessage(`${itemArray[0]} won`);\n        } else if (\n            itemArray[2] !== \"empty\" &&\n            itemArray[2] === itemArray[4] &&\n            itemArray[4] === itemArray[6]\n        ) {\n            setWinMessage(`${itemArray[2]} won`);\n        }\n    };\n\n    const changeItem = (itemNumber) => {\n        if (winMessage) {\n            return toast(winMessage, { type: \"sucess\" });\n        }\n\n        if (itemArray[itemNumber] === \"empty\") {\n            itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n            setIsCross(!isCross);\n        } else {\n            return toast(\"already filled\", { type: \"error\" });\n        }\n\n        checkIsWinner();\n    };\n\n    return (\n        <Container className=\"p-5\">\n            <ToastContainer position=\"bottom-center\" />\n            <Row>\n                <Col md={6} className=\"offset-md-3\">\n                    {winMessage ? (\n                        <div className=\"mb-2 mt-2\">\n                            <h1 className=\"text-success text-uppercase text-center\">\n                                {winMessage}\n                            </h1>\n                            <Button color=\"success\" block onClick={reloadGame}>\n                                Reload the game\n                            </Button>\n                        </div>\n                    ) : (\n                        <h1 className=\"text-center text-warning\">\n                            {isCross ? \"Cross\" : \"Circle\"} turn\n                        </h1>\n                    )}\n                    <div className=\"grid\">\n                        {itemArray.map((item, index) => (\n                            <Card\n                                color=\"warning\"\n                                onClick={() => changeItem(index)}\n                            >\n                                <CardBody className=\"box\">\n                                    <Icon name={item} />\n                                </CardBody>\n                            </Card>\n                        ))}\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}